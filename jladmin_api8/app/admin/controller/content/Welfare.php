<?php
namespace app\admin\controller\content;
use app\admin\controller\Base;
use app\common\model\welfare as models;
use app\validate\Welfare as validates;
use think\exception\ValidateException;

class Welfare extends Base
{
    protected $model;
    protected $article;
    /**
     * 公益控制器
     */
    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 列表
     */
    public function list()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        //查询搜索条件
        $post = $this->request->post();
        $map = [];
        isset($post['title']) && $map [] = ['title', 'like', '%' . $post['title'] . '%'];

        $list = $this->model->page_list($map, $limit, $page);
        return $this->success($list);
    }

    /**
     * 添加
     */
    public function add()
    {
        //过滤数据
        $postField = 'labels,title,content,img_path,record_no,collection_agency,collection_agency_logo,executing_agency,executing_agency_logo,progress_content';
        $post = $this->verify($postField,'add');

        if (!empty($post['content'])) $post['content'] = $this->getEncodedContent($post['content']);
        if (!empty($post['progress_content'])) $post['progress_content'] = $this->getEncodedContent($post['progress_content']);
        $post['initiate_time'] = time();
        $save = $this->model->save($post);
        if ($save) return $this->success([]);
        return $this->failed('新增失败');
    }

    /**
     * 查询
     * @return mixed
     */
    public function detail()
    {
        //过滤数据
        $postField = 'id';
        $this->verify($postField,'detail');
        return $this->success($this->article);
    }

    /**
     * 修改
     * @return mixed
     */
    public function edit()
    {
        //过滤数据
        $postField = 'labels,id,title,content,img_path,record_no,collection_agency,collection_agency_logo,executing_agency,executing_agency_logo,progress_content';
        $post = $this->verify($postField,'edit');

        if (!empty($post['content'])) $post['content'] = $this->getEncodedContent($post['content']);
        if (!empty($post['progress_content'])) $post['progress_content'] = $this->getEncodedContent($post['progress_content']);
        //执行修改数据
        $where = array();
        $where['id'] = $post['id'];
        $save = $this->model->where($where)->update($post);
        if ($save) return $this->success([]);
        return $this->failed('修改失败');
    }

    /**
     * 公益文章上下架
     * @return mixed|\think\response\Json
     */
    public function grounding(){
        //过滤数据
        $postField = 'id,type';
        $post = $this->verify($postField,'grounding');
        //执行修改数据
        $where = array();
        $where['id'] = $post['id'];
        $save = $this->model->where($where)->update($post);
        if ($save) return $this->success([]);
        return $this->failed('上下架失败');
    }

    /**
     * 公益文章删除
     * @return mixed|\think\response\Json
     */
    public function del(){
        //过滤数据
        $postField = 'id';
        $post = $this->verify($postField,'del');
        //执行修改数据
        $where = array();
        $where['id'] = $post['id'];
        $del = $this->model->where($where)->delete();
        if ($del) return $this->success([]);
        return $this->failed('删除失败');
    }
    /**
     * 验证数据
     * @param $postField
     * @param $type
     * @return array|\think\response\Json
     */
    private function verify($postField,$type){
        $post = $this->request->only(explode(',', $postField), 'post', null);
        //验证数据
        try {
            validate(validates::class)->scene($type)->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        //处理图片
        isset($post['img_path']) && $post['img_path']= image_update($post['img_path']);
        if ($type == 'add'){
            $user = $this->model->where('title', $post['title'])->find();
            if ($user) return $this->failed('该标题以存在');
        }elseif ($type == 'edit'){
            //查询是否重复的
            $find = $this->model->where('title', $post['title'])->where('id', '<>', $post['id'])->find();
            if ($find) return $this->failed('该标题以存在');
        }else{
            $user = $this->model->find($post['id']);
            if (!$user) return $this->failed('文章不存在');
            $this->article = $user;
        }
        return $post;
    }

    private function get_http_type()
    {
        $http_type = ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') || (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https')) ? 'https://' : 'http://';
        return $http_type;
    }

    /**
     * 替换富文本中的媒体文件链接
     * @param $content
     * @return string
     */
    private function getEncodedContent($content){
        //将内容转义回去,避免函数失效
        $content = htmlspecialchars_decode(stripslashes($content));
        $url = $this->get_http_type().$_SERVER['HTTP_HOST'] . '/storage';
        $content = str_replace($url,'',$content);
        //转义
        return htmlspecialchars($content);
    }
}