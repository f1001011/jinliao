<?php


namespace app\admin\controller\log;


use app\admin\controller\Base;


use app\common\model\PayCash as models;
use app\common\model\UserModel;
use app\common\model\GoodsOrder;
use app\common\model\PayRecharge;
use app\common\service\Excel;
use app\common\traites\PublicCrudTrait;
use think\facade\Db;
use think\facade\Log;
use app\common\model\SysConfig;


class PayCash extends Base
{
    protected $model;
    use PublicCrudTrait;

    const TYPE_WITHDRAWAL_REFUND         = 2;        //提现退款
    const STATUS_WITHDRAWAL_REFUSAL      = 210;      //拒绝提款
    const AUDIT_WITHDRAWAL_REFUND        = 2;        //提现被拒绝

    /**
     * 提现控制器
     */
    public function initialize()
    {
        $this->model = new models();
        $this->GoodsOrder = new GoodsOrder();
        $this->PayRecharge = new PayRecharge();
        //  parent::initialize(); // TODO: Change the autogenerated stub
    }


//    public function test()
//    {
//        $data = UserModel::where('user_team', 666666)->select()->column('id');
//
//        $str_user_team = implode(",", $data);
//
//        $models = models::where("u_id in ($str_user_team)")->select();
//        return $this->success($models);
//
//    }

    /**
     * 列表
     */
    public function index()
    {
        //当前页
        $page = $this->request->param('page', 1);
        //每页显示数量
        $limit = $this->request->param('limit', 20);
        $is_excel = $this->request->param('is_excel', 0);

        $ids = $this->request->param('ids');

        //查询搜索条件
        $post = $this->request->param();
        $map = [];
        $date = [];
        !empty($post['user_name']) && $map[] = ['b.user_name|b.phone', 'like', '%' . $post['user_name'] . '%'];
        isset($post['type']) && $map [] = ['a.type', '=', intval($post['type'])];
        isset($post['agents']) && $post['agents'] != '' && $map[] = ['b.market_uid', '=', $post['agents']];
        isset($post['uid']) && $post['uid'] != '' && $map[] = ['a.u_id', '=', $post['uid']];
        isset($post['order_on']) && $post['order_on'] != '' && $map[] = ['a.order_on', '=', $post['order_on']];
        isset($post['pay_type']) && $post['pay_type'] != '' && $map[] = ['a.pay_type', '=', $post['pay_type']];

        $tMap = $map;
        if (isset($post['status']) && $post['status'] !=''){
            $map[] = ['a.status', '=', intval($post['status'])];
            $tMap[] = ['a.status', '=', intval($post['status'])];
        }else{
            $tMap[] = ['a.status', '=', 0];
        }

        if (isset($post['start']) && isset($post['end']) && !empty($post['start']) && !empty($post['end'])) {
            $date['start'] = $post['start'];
            $date['end'] = $post['end'];
        }



        $list = $this->model->page_list($map, $limit, $page, $date,$is_excel);
        if ($is_excel > 0){
            return $this->excel($list->toArray());
        }
        $sun_money = $this->model->getDateTimeTotal($tMap, $date);
        $list = $list->toArray();
        $list['total_sum'] = $sun_money;
        return $this->success($list);
    }

    /**
     *
     * 线上还是线下打款
     * */
//    public function is_line()
//    {
//        //过滤数据
//        $postField = 'id,is_online';
//        $post = $this->request->only(explode(',', $postField), 'post', null);
//        //检测订单
//        $find = $this->model->where('id', (int)$post['id'])->where('status', 1)->where('is_online', 0)->find();
//        // 执行线上打款接口 开始 应老板需求新增
//
//        $post['line_time'] = date('Y-m-d H:i:s');
//        $post['line_admin_uid'] = session('admin_user')['id'];
//        $post['is_online'] = $post['is_online'] == 1 ? 1 : 2;
//
//        if ($post['is_online'] == 1) {
//            $cashOrderInfo = $find->toArray();
//            $this->daifu($cashOrderInfo);
//            // 更新 状态
//            $res = $this->model->update($post);
//            if ($res) {
//                return $this->success([]);
//            } else {
//                return $this->failed('线上打开失败');
//            }
//
//        } else {
//            $res = $this->model->update($post);
//            if ($res) {
//                return $this->success([]);
//            } else {
//                return $this->failed('线下打开失败');
//            }
//        }
//    }

    /**
     * 提现记录
     * */
//    public function daifu($info)
//    {
//        $SysConfig = new SysConfig();
//
//        //支付地址
//        $api_address = $SysConfig->where('name', 'admin_address')->value('value');
//        //前端地址
//        $web_address = $SysConfig->where('name', 'web_address')->value('value');
//        $daifuData = array();
//        $daifuData['merchant'] = '88006';
//        $daifuData['total_amount'] = $info['money_actual']; // Number
//        $daifuData['callback_url'] = $api_address . '/home/back/daiFuBack';
//        $daifuData['order_id'] = $info['order_on'];
//        $daifuData['bank'] = $info['u_bank_name'];
//        $daifuData['bank_card_name'] = $info['u_bank_user_name'];
//        $daifuData['bank_card_account'] = $info['u_bank_card']; // Number
//        $daifuData['bank_card_remark'] = 'no';
//        $daifuData['sign'] = verifySignApplet($daifuData);
//
//        $url = 'https://apicloud.gcash.cash/api/daifu';
//        $curl_res = curl_post($url, $daifuData);
//        Log::write('代付信息：' . $curl_res, 'notice');
//        if ($curl_res) {
//            $curls_res = json_decode($curl_res, true);
//            if ($curls_res['status'] == 1) {
//                //  return show(json_encode($curls_res['message']),1);
//            } else {
//                return $this->failed(json_encode($curls_res['message']));
//            }
//        } else {
//            return show([], config('ToConfig.http_code.error'), 'Invalid payment link');
//        }
//    }

    //提现通过
    public function setPass()
    {
        //过滤数据
        $postField = 'id';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        CacheRepeatClick('admin_setpass'.$post['id']);

        //检测订单
        $find = (new models())->where('id', $post['id'])->where('status', 0)->find();
        if (!$find) {
            return $this->failed('该提现订单已处理或不存在');
        }
        $find = $find->toArray();
        Db::startTrans();
        try {
            $mUser = new UserModel();
            //修改当前订单状态
            (new models())->where('id', $post['id'])->update(['status' => 1, 'success_time' => date('Y-m-d H:i:s')]);
            //修改用户 总提现
            $mUser->add_total_withdraw($find['u_id'], $find['money']);
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
        }

        return $this->success([]);
    }

    /**
     *
     * 提现拒绝
     * */
    public function refuse()
    {
        //过滤数据
        $postField = 'id,msg';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        //检测订单
        $find = $this->model->where('id', $post['id'])->where('status', 0)->find();
        if (!$find)
            return $this->failed('该提现订单已处理或不存在');

        CacheRepeatClick($post['id']);
        $mUser = new UserModel();
        $mMoneyLog = new \app\common\model\MoneyLog();
        $userInfo = $mUser->info($find['u_id']);//查询用户信息

        $market_uid = $userInfo->market_uid;
        $money = $find['money'];
        $type = self::TYPE_WITHDRAWAL_REFUND;
        $status = self::STATUS_WITHDRAWAL_REFUSAL;
        $money_before = $userInfo['money_balance'];
        $money_end = $userInfo['money_balance'] + $money;
        $mark = 'withdraw error';
        //增加用户可提现金额
        Db::startTrans();
        try {
            $mUser->where('id', $find['u_id'])->dec('money_freeze', $money)->inc('money_balance', $money)->update();
            //1 退回用户金额
            $mMoneyLog->inserts($type, $status, $money, $money_before, $money_end, $find['u_id'], $market_uid, $mark, $find['id'], 5);
            $this->model->where('id', $find['id'])->save(['status' => self::AUDIT_WITHDRAWAL_REFUND]);
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
        }
        return $this->success([]);
    }


    public function examine(){
        //过滤数据
        $postField = 'ids,type';
        $post = $this->request->only(explode(',', $postField), 'post', null);

        $ids = [];
        if (strpos($post['ids'], '-') !== false) {
            // 范围表示，例如 1-5
            [$start, $end] = explode('-', $post['ids']);
            if (is_numeric($start) && is_numeric($end) && $start <= $end) {
                $ids = range((int)$start, (int)$end);
            }
        } else {
            // 逗号分隔表示，例如 1,2,3,4,5
            $ids = explode(',', $post['ids']);
        }
        if (count($ids) == 0){
            return $this->failed('请输入需要修改的提现订单数据');
        }
        CacheRepeatClick('admin_setpass' .$ids[0] . $post['type']);

        $failIds = [];
        foreach ($ids as $k=>$v){
            //检测订单
            $find = $this->model->where('id', $v)->where('status', 0)->find();
            if (!$find){
                $failIds[$v] = "订单不存在";
                continue;
            }
            $find = $find->toArray();
            if ($post['type'] ==1){
                Db::startTrans();
                try {
                    $mUser = new UserModel();
                    //修改当前订单状态
                    (new models())->where('id', $v)->update(['status' => 1, 'success_time' => date('Y-m-d H:i:s')]);
                    //修改用户 总提现
                    $mUser->add_total_withdraw($find['u_id'], $find['money']);
                    Db::commit();
                } catch (\Exception $e) {
                    // 回滚事务
                    $failIds[$v] = "通过提现请求失败";
                    Db::rollback();
                }
            }else if ($post['type'] == 2){
                $mUser = new UserModel();
                $mMoneyLog = new \app\common\model\MoneyLog();
                $userInfo = $mUser->lock(true)->find($find['u_id']);//查询用户信息

                $market_uid = $userInfo->market_uid;
                $money = $find['money'];
                $type = self::TYPE_WITHDRAWAL_REFUND;
                $status = self::STATUS_WITHDRAWAL_REFUSAL;
                $money_before = $userInfo['money_balance'];
                $money_end = $userInfo['money_balance'] + $money;
                $mark = 'withdraw error';
                //增加用户可提现金额
                Db::startTrans();
                try {
                    $mUser->where('id', $find['u_id'])->dec('money_freeze', $money)->inc('money_balance', $money)->update();
                    //1 退回用户金额
                    $mMoneyLog->inserts($type, $status, $money, $money_before, $money_end, $find['u_id'], $market_uid, $mark, $find['id'], 5);
                    $this->model->where('id', $find['id'])->save(['status' => self::AUDIT_WITHDRAWAL_REFUND]);
                    Db::commit();
                } catch (\Exception $e) {
                    // 回滚事务
                    $failIds[$v] = "拒绝提现请求失败";
                    Db::rollback();
                }
            }
        }
        return $this->success($failIds);
    }
    /**
     * 修改金额
     * */
    public function amount_edit()
    {
        //过滤数据
        $postField = 'id,money_fee,money_actual';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        //检测订单
        $find = $this->model->where('id', $post['id'])->where('status', 0)->find();
        if (!$find)
            return $this->failed('该提现订单已处理或不存在');
        if ((!isset($post['money_fee']) && !is_numeric($post['money_fee'])) || (!isset($post['money_actual']) && !is_numeric($post['money_actual']))) {
            return $this->failed('请传递有效参数');
        }
        $res = $this->model->update($post);
        if ($res) {
            return $this->success([]);
        } else {
            return $this->failed('操作失败');
        }
    }

    public function excelFrom(){

    }

    private function excel($data)
    {
        $excel = new Excel();

        $field_title = [
            'id'=>'ID',
            'u_id'=>"用户ID",
            'create_time'=>'申请时间',
//            'success_time'=>'审核时间',
            'money'            => '提现金额',
//            'money_before'=>'开始金额',
//            'money_end'=>'结束金额',
//            'money_fee'=>'手续费',
//            'money_actual'=>'实际到账金额',
//            'order_on'=>'订单号',
//            'phone'=>'电话',
            'user_name'        => '姓名',
            'u_bank_name'=>'银行名',
            'u_back_card'      => '收款账号',
            'u_back_user_name' => '收款名',
            'text'=>'状态'
//            'msg'=>'备注',
        ];

        $fields = [
            'id',
            'create_time',
            "u_id",
//            'success_time',
//            'success_time',
            'money',
//            'money_before',
//            'money_end',
//            'money_fee',
//            'money_actual',
//            'order_on',
//            'phone',
            'user_name',
            'u_bank_name',
            'u_back_card',
            'u_back_user_name',
            'text',
//            'msg'
        ];
        $filename = '提现导出' . date('YmdHis').rand(10,999);
        return $excel->export($field_title, $fields, $data, $filename);
    }

}