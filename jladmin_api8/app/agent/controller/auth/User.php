<?php

namespace app\agent\controller\auth;


use app\agent\controller\Base;
use app\common\model\CallBackModel;
use app\common\model\FanyongLog;
use \app\common\model\MoneyLog;
use app\common\model\PayCash;
use app\common\model\PayRecharge;
use app\common\model\UserModel;
use app\common\model\UserModel as models;
use app\common\model\UserWeekModel;
use app\common\model\VipInviteLogModel;
use app\common\model\VipLogModel;
use app\common\model\VipModel;
use app\common\model\VipTaskLogModel;
use app\common\traites\PublicCrudTrait;
use app\common\model\BankModel;
use app\common\vip\vipCommon;
use app\validate\User as validates;
use think\exception\ValidateException;
use think\facade\Db;

class User extends Base
{
    protected $model;
    use PublicCrudTrait;

    public function initialize ()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    //获取列表信息
    public function index ()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        //查询搜索条件
        $post = array_filter($this->request->post());
        $map = [];
        $map[] = ['user_team','=',session('admin_agent_user.user_team')];
        isset($post['user_name']) && $map [] = ['b.user_name', 'like', '%' . $post['user_name'] . '%'];
        isset($post['phone']) && $map[] = ['b.phone', '=', $post['phone']];
        isset($post['market_uid']) && $map [] = ['b.market_uid', '=', $post['market_uid']];
        isset($post['user_team']) && $map [] = ['b.user_team', '=', $post['user_team']];
        isset($post['id']) && $map [] = ['b.id', '=', $post['id']];
        isset($post['max_vip_lv']) && $map [] = ['b.vip_lv', '<=', $post['max_vip_lv']];
        isset($post['min_vip_lv']) && $map [] = ['b.vip_lv', '>=', $post['min_vip_lv']];
        isset($post['vip_lv']) && $map [] = ['b.vip_lv', '=', $post['vip_lv']];
        isset($post['agent_1']) && $map [] = ['b.agent_id_1', '=', $post['agent_1']];
        isset($post['agent_2']) && $map [] = ['b.agent_id_2', '=', $post['agent_2']];
        isset($post['agent_3']) && $map [] = ['b.agent_id_3', '=', $post['agent_3']];
        isset($post['start']) && $map [] = ['b.create_time', '>=', $post['start']]; //注册IP少选
        isset($post['end']) && $map [] = ['b.create_time', '<', $post['end']]; //注册IP少选
        isset($post['min_withdraw_num']) && $map [] = ['withdrawals_count', '>=', $post['min_withdraw_num']];

        $list = $this->model->page_list($map, $limit, $page);
        return $this->success($list);
    }

    /**
     * 状态切换 上下架
     */
    public function withdrawalstatus()
    {
        //过滤数据
        $postField = 'id,is_withdraw';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        $id = $post['id'];
        $is_withdraw = $post['is_withdraw'];
        $find = $this->model->find($id);
        $save = $find->save(['is_withdraw' => $is_withdraw]);
        if ($save)
            return $this->success([]);
        return $this->failed('修改失败');
    }

    /**
     * money_change_type: 1增加;2:减少
     * uid: 20  用户id
     * change_money:  变化金额
     * money_status: 90个人总收益 11银行卡充值 12积分 13绿币 14个人佣金 15团队津贴 16碳票 17碳汇 18可提现余额 其他：冻结金额
     * @return void|null
     */
    public function money_edit ()
    {
        $postField = 'money_change_type,change_money,uid,money_status,vip_id,vip_lv,operate_pwd,ft_code';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        $post = array_filter($post, 'custom_filter');
        //验证数据
        try {
            validate(validates::class)->scene('money')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        CacheRepeatClick('amountEdit' . $post['uid'] , 60);
        //判断操作密码是否正确
        $operate_pwd = session('admin_agent_user.pwd');
        if (md5($post['operate_pwd']) != $operate_pwd) {
            return $this->failed('操作密码错误');
        }

        if (!isset($post['ft_code']) || empty($post['ft_code'])) {
            return $this->failed('ftcode不能为空');
        }
        $map[] = ['user_team','=',session('admin_agent_user.user_team')];
        $map[] = ['id','=',$post['uid']];
        if ($post['change_money'] > 1000000){
            return $this->failed("充值金额超上限");
        }
        //查询当前用户的余额
        $find = $this->model->where($map)->find();
        if (!$find)
            return $this->failed('用户不存在');

        $this->amount_edit($post, $find);
    }

    /**
     * 用户余额修改
     * @param $post //传入参数
     * @param $find //用户信息
     * @return mixed|null
     */
    private function amount_edit ($post, $find)
    {
        $ftCode= $post['ft_code'];
        $money = abs($post['change_money']);
        $money_field = '';
        $status = $post['money_status'];
        $type = $post['money_change_type'];
        $money_before = $money_end = $pay_type = $vip_id = $vip_lv = 0;
        //查询ftCode对应支付信息是否存在
        $callbackInfo = CallBackModel::where('trade_on' , $ftCode)->where('is_audit' , 0)->find();
        //代理商只能操作VIP升级
        if ($post['money_status'] != 105){
            return $this->failed('操作不合法');
        }
        //修改用户押金
        if ($post['money_status'] == 105) {

            if (!$callbackInfo) {
                return $this->failed('ftcode对应支付信息不存在');
            }
            if ($callbackInfo->is_audit ==1){
                return $this->failed('相关FT订单已经被使用过');
            }
            if ($money > $callbackInfo->amount) {
                return $this->failed('升级金额不能大于ft付款金额,' . "用户付款金额:$callbackInfo->amount" . " 升级金额:$money");
            }
            if ($post['vip_lv'] <= $find['vip_lv']) {
                return $this->failed('vip操作等级不能小于当前等级或与当前等级一致');
            }
            $money_field = 'deposit_money';
            $pay_type = 6;
            if (!isset($post['vip_id']) || intval($post['vip_id']) == 0 || !isset($post['vip_lv'])) {
                return $this->failed('vip参数错误');
            }


            if ($post['vip_lv'] == 5) {
                $vipNumber = models::where('agent_id_1' , $post['uid'])
                    ->where('vip_lv' , '>' , 0)
                    ->column('vip_lv');
                if (count($vipNumber) <25){
                    return $this->failed('用户升级vip5,必须有25名以上直属用户,该用户只有' . count($vipNumber));
                }
                $checkVipNumber = array_filter($vipNumber , function($number){
                    return $number >=2;
                });
                if ($checkVipNumber < 13){
                    return $this->failed('用户升级 VIP4，直属下属 VIP2 以上用户数量要至少 5 个，该用户只有 ' . count($checkVipNumber));
                }
            }

            if ($post['vip_lv'] >= 6) {
                return $this->failed('用户升级vip6及以上,需要通过审核');
            }

            //查询自己的vip信息
            $vipFind = VipModel::page_one(['id' => intval($post['vip_id'])]);
            $vip_id = $vipFind['id'];
            $vip_lv = $vipFind['vip_lv'];
        }


        if ($status == 101) {
            return $this->failed('充值占未开放');
        }

        //修改用户的活动金额等 余额的操作
        if (in_array($status, [103, 104, 106, 107, 102])) {
            $money_field = 'money_balance';
            $pay_type = 5;
        }

        if ($money_field == '') {
            return $this->failed('操作不合法1');
        }

        $money_before = $find->$money_field;
        $money_end = $type == 1 ? $find->$money_field + $money : $find->$money_field - $money;
        if ($money_end < 0) {
            return $this->failed('操作不合法2');
        }
        $sourceId = 0;//来源ID
        $mark ='';
        $v4money = 0;
        Db::startTrans();
        try {
            $UserModel = new UserModel();
            $userInfo = $UserModel->where('id', $find->id)->lock(true)->find();
            if ($userInfo->vip_lv == $vip_lv && $status == 105) {
                Db::rollback();
                return $this->failed('请不要连续重复操作,该用户已经是vip' . $vip_lv . "了,请刷新网页或者重新搜索该用户");
            }
            if ($type != 1) {//增加减少用户金额
                $UserModel->where('id', $find->id)->dec($money_field, $money)->update();
            } else {
                if ($status == 105 && $vip_lv > 0 && $vip_id > 0) {// && $type == 1
                    $type = 2;//如果是 购买会员 增加的情况，订单需要写成支出


                    //本身就是VIP,现在进行升级,回退充值的钱
                    if ($find->$money_field != 0 && $find->vip_lv != 0 && $vip_lv > $find->vip_lv){
                        MoneyLog::inserts(1, 107, floor($find->$money_field / 0.9), $find->money_balance, $find->money_balance + floor($find->$money_field / 0.9),$find->id, session('admin_user.id'), "update vip ".$vip_lv . " and refund vip ".$find->vip_lv ." money", $sourceId, 5);
                        $UserModel->where('id' , $find->id)->dec($money_field , $find->$money_field)->inc('money_balance' , floor($find->$money_field / 0.9))->update();
                    }

                    //如果是第一次充值VIP,则给他的上级添加一次邀请机会,
                    //以及添加一次抽奖机会,抽奖机会不限制是否是VIP
                    if ($find->vip_lv == 0){
                        $UserModel->where('id' , $find->agent_id)->where("vip_lv" , ">" , 0)->inc('vip_count' , 1)->update();
                        $UserModel->where('id' , $find->agent_id)->inc('draws' , 1)->update();
                        //如果是第一次充值VIP,且在123级内,则给他加上活动抽奖次数
                        if (in_array($vip_lv , [1,2,3])){
                            $UserModel->where('id' , $find->agent_id)->inc('vip_change_'.$vip_lv , 1)->update();
                        }
                        //给用户 上三级加上本周的统计数据
                        UserWeekModel::serUpdateWeek($find->create_time,$find->agent_id,$find->user_team);
                        UserWeekModel::serUpdateWeek($find->create_time,$find->agent_id_2,$find->user_team);
                        UserWeekModel::serUpdateWeek($find->create_time,$find->agent_id_3,$find->user_team);
                        $v4money = intval($money * 0.1);
                    }

                    //指定时间范围内，给用户增加活动奖励
                    if ($post['vip_lv'] >=3){
                        VipTaskLogModel::setUserTaskAward($find,$post['vip_lv']);
                    }

                    //如果是实习生旗下的用户升级vip,那么给他返回对应vip等级的优惠金
                    $lastLogin = $UserModel->where('id' , $find->agent_id)->where("vip_lv" , "=" , 0)->find();
                    if ($lastLogin!= null && $find->vip_lv == 0){
                        if (isset(vipCommon::VIP_INTERN_REFUND_AMOUNT[$vip_lv])){
                            $UserModel->where('id' , $find->agent_id)->where("vip_lv" , "=" , 0)->inc('discount_money' , vipCommon::VIP_INTERN_REFUND_AMOUNT[$vip_lv])->update();
                        }
                    }

                    //给上级的
                    $callbackMoney = $money - $find->discount_money;
                    //如果是操作用户 105 的，给用户升级vip.
                    if ($find->discount_money > 0){
                        $UserModel->where('id', $find->id)->inc($money_field, $callbackMoney)->dec('discount_money',$find->discount_money)->inc('vip_count' , UserModel::VipGuaranteeArr[$vip_lv])->update(['vip_lv' => $vip_lv, 'vip_id' => $vip_id]);
                    }else{
                        $UserModel->where('id', $find->id)->inc($money_field, $money)->inc('vip_count' , UserModel::VipGuaranteeArr[$vip_lv])->update(['vip_lv' => $vip_lv, 'vip_id' => $vip_id]);
                    }
                    //写入vip 日志
                    $sourceId = VipLogModel::setInsert($find->vip_lv, $vip_lv, $callbackMoney, $money_end, $find->id, $find->deposit_money == 0 ? 1 : 2,$find->discount_money , $ftCode);
                    $fanshuilist = $this->vipHead($find, $vipFind);//$vipFind 105的时候 一定存在的


                    //废弃FT码
                    $callbackInfo->is_audit = 1;
                    $callbackInfo->save();

                    $mark = 'UID：'.$find->id.'-phone：'.$find->phone.'-username：'.$find->user_name.'-discount:'.$find->discount_money;
                    //判断一级反水是否存在
                    foreach ($fanshuilist as $key => $value) {
                        //一级反水存在，写入
                        if (empty($value)){
                            continue;
                        }

                        $fmoney =$fpid=$fmoney_before=$fmoney_end=$fpay_status=$fmoney_type= 0;

                        $fmoney = $value['money']+$find->deposit_money;
                        $fpid = $value['pid'];
                        $fmoney_before = intval($value['money_before']);
                        $fmoney_end = $value['money_end'];
                        $fpay_status = $value['pay_status'];
                        if ($key == 'agent_one'){
                            $fmoney_type = 1;
                            //如果是第一次充值，并且上级大于 V4，给用户返回金额
                            if ($v4money > 0 && $value['vip_lv'] >=4){
                                UserModel::where('id', $find->id)->inc('money_balance', $v4money)->update();
                                MoneyLog::inserts(1, 127, $v4money, $find->money_balance, $find->money_balance+$v4money,$find->id, session('admin_user.id'), 'First Upgrade Rewards', 0, 5);
                            }
                        }

                        if ($key == 'agent_two'){
                            $fmoney_type = 2;
                        }

                        if ($key == 'agent_three'){
                            $fmoney_type = 3;
                        }
                        if ($find->vip_lv >0){
                            continue;
                        }
                        $UserModel->where('id', $fpid)->inc('money_balance', $fmoney)->update();//给用户加钱
                        MoneyLog::inserts(1, $fpay_status, $fmoney, $fmoney_before, $fmoney_end,$fpid, session('admin_user.id'), $mark, $sourceId, 5);
                        FanyongLog::log($fpid,$fmoney_type,$fmoney,' Purchase VIP ID '.$vip_id.' '.$fmoney_type.' commission rebate',$find->user_name,$find->id,$sourceId,0);
                        continue;
                    }
                } else if ($status == 102) {
                    $UserModel->where('id', $find->id)->inc($money_field, $money)->inc('total_withdraw', $money)->update();
                    $sourceId = PayRecharge::setInset([
                                                          'create_time'  => date('Y-m-d H:i:s'),
                                                          'success_time' => date('Y-m-d H:i:s'),
                                                          'money'        => $money,
                                                          'admin_uid'    => 0,
                                                          'uid'          => $find->id,
                                                          'order_no'     => orderCode('G'),
                                                          'status'       => 2,
                                                          'money_end'    => $money_end,
                                                          'money_before' => $money_before,
                                                          'u_ip'         => $this->request->ip(),
                                                          'market_uid'   => session('admin_user.id'),
                                                          'pay_type'     => $pay_type,
                                                      ]);
                } else if ($status == 101) {
                    $UserModel->where('id', $find->id)->inc($money_field, $money)->inc('total_recharge', $money)->update();
                    $sourceId = PayCash::setInset([
                                                      'create_time'  => date('Y-m-d H:i:s'),
                                                      'success_time' => date('Y-m-d H:i:s'),
                                                      'money'        => $money,
                                                      'money_actual' => $money,
                                                      'admin_uid'    => 0,
                                                      'u_id'         => $find->id,
                                                      'order_no'     => orderCode('G'),
                                                      'status'       => 1,
                                                      'money_end'    => $money_end,
                                                      'money_before' => $money_before,
                                                      'money_fee'    => 0,
                                                      'u_ip'         => $this->request->ip(),
                                                      'market_uid'   => session('admin_user.id'),
                                                      'pay_type'     => $pay_type,
                                                  ]);
                } else {
                    $UserModel->where('id', $find->id)->inc($money_field, $money)->update();
                }
            }
            MoneyLog::inserts($type, $status, $money, $money_before, $money_end, $find->id, session('admin_user.id'), $mark, $sourceId, $pay_type);
            $save = true;
            Db::commit();
        } catch (ValidateException $e) {
            Db::rollback();
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        if ($save)
            return $this->success([]);
        return $this->failed('修改失败');

    }

    /**
     * 验证操作密码是否正确
     * @return mixed|null
     */
    public function operate()
    {
        $postField = 'operate_pwd';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        $post = array_filter($post);
        //验证数据
        try {
            validate(validates::class)->scene('operate')->check($post);
        } catch (ValidateException $e) {
            // 验证失败 输出错误信息
            return $this->failed($e->getError());
        }
        //判断操作密码是否正确
        $operate_pwd = session('admin_user.operate_pwd');
        if (pwdEncryption($post['operate_pwd']) != $operate_pwd) {
            return $this->failed('操作密码错误');
        }
        return $this->success([]);
    }

    public function is_status ()
    {
        $id = $this->request->post('id', 0);
        if ($id <= 0)
            return $this->failed('用户不存在');
        $find = $this->model->find($id);
        $find->is_frozen = $find->is_frozen == 1 ? 0 : 1;
        $save = $find->save();
        if ($save)
            return $this->success([]);
        return $this->failed('修改失败');
    }
    public function bankCard ()
    {
        //当前页
        $page = $this->request->post('page', 1);
        //每页显示数量
        $limit = $this->request->post('limit', 10);
        $uid = $this->request->post('uid');
        $map = [];
        $map[] = ['status', '=', 1];
        if (!empty($uid)) {
            $map[] = ['u_id', '=', $uid];
        }
        $list = BankModel::page_list($map, $limit, $page);
        return $this->success($list);
    }

    public function bankCardEdit ()
    {
        $postField = 'id,name,card';
        $post = $this->request->only(explode(',', $postField), 'post', null);
        if (empty($post['id'])) {
            return $this->failed('无效参数');
        }
        if (empty($post['name']) || empty($post['card'])) {
            return $this->failed('缺少参数');
        }
        $result = BankModel::page_one(['id' => $post['id']]);
        if (empty($result)) {
            return $this->failed('ID错误');
        }
        $res = BankModel::where(['id' => $post['id']])->update($post);
        if (!$res)
            $this->failed('修改失败');
        return $this->success([]);
    }



    //vip首存奖励
    //$find 用户信息  $vipFind 用户达到的vip等级的信息
    private function vipHead ($find, $vipFind)
    {
        $array = [
            'agent_one'   => [],
            'agent_two'   => [],
            'agent_three' => [],
        ];
        //没有上一级 deposit_money 表示一级有押金
        if ($find['deposit_money'] != 0 || $find['agent_id'] == 0) {
            return $array;
        }

        //1 上级的等级是否小于 本次升级人购买的vip等级
        //2 如果小于了，就只能获取  自己挡位的 vip等级奖励 的 %多少

        $vipFindLv = json_decode($vipFind['invite_hire'], true);

        ################################
        //查询一级会员的信息  计算一级会员获得的金额
        $agentOneFind = UserModel::page_one(['id' => $find['agent_id']]);
        $agentOne = [
            'pid'        => $agentOneFind['id'],
            'vip_lv'        => $agentOneFind['vip_lv'],
            'pay_status' => MoneyLog::FAN_AGENT_1,
        ];
        //上级会员的 vip等级小于自己的等级，获得上级会员的 自己的 vip挡位的 %
        $agentOneVipFind = VipModel::page_one(['id' => $agentOneFind['vip_id']]);
        $agentOneVipFindLv = json_decode($agentOneVipFind['invite_hire'], true);
        $agentOne['money'] = $agentOneFind['vip_lv'] < $vipFind['vip_lv'] ? $agentOneVipFind['need_money'] * $agentOneVipFindLv['agent_one'] / 100 : $vipFind['need_money'] * $vipFindLv['agent_one'] / 100;
        $agentOne['money_before'] = $agentOneFind['money_balance'];
        $agentOne['money_end'] = $agentOneFind['money_balance'] + $agentOne['money'];
        $array['agent_one'] = $agentOne;

        //查询二级会员的信息  计算一级会员获得的金额
        if ($find['agent_id_2'] == 0) {
            return $array;
        }
        ################################
        $agentTwoFind = UserModel::page_one(['id' => $find['agent_id_2']]);
        $agentTwo = [
            'pid'        => $agentTwoFind['id'],
            'vip_lv'        => $agentTwoFind['vip_lv'],
            'pay_status' => MoneyLog::FAN_AGENT_2,
        ];
        //上级会员的 vip等级小于自己的等级，获得上级会员的 自己的 vip挡位的 %
        $agentTwoVipFind = VipModel::page_one(['id' => $agentTwoFind['vip_id']]);
        $agentTwoVipFindLv = json_decode($agentTwoVipFind['invite_hire'], true);
        $agentTwo['money'] = $agentTwoFind['vip_lv'] < $vipFind['vip_lv'] ? $agentTwoVipFind['need_money'] * $agentTwoVipFindLv['agent_two'] / 100 : $vipFind['need_money'] * $vipFindLv['agent_two'] / 100;
        $agentTwo['money_before'] = $agentTwoFind['money_balance'];
        $agentTwo['money_end'] = $agentTwoFind['money_balance'] + $agentTwo['money'];
        $array['agent_two'] = $agentTwo;

        //查询二级会员的信息  计算一级会员获得的金额
        if ($find['agent_id_3'] == 0) {
            return $array;
        }
        ################################
        $agentThreeFind = UserModel::page_one(['id' => $find['agent_id_3']]);
        $agentThree = [
            'pid'        => $agentThreeFind['id'],
            'vip_lv'        => $agentThreeFind['vip_lv'],
            'pay_status' => MoneyLog::FAN_AGENT_3,
        ];
        //上级会员的 vip等级小于自己的等级，获得上级会员的 自己的 vip挡位的 %
        $agentThreeVipFind = VipModel::page_one(['id' => $agentThreeFind['vip_id']]);
        $agentThreeVipFindLv = json_decode($agentThreeVipFind['invite_hire'], true);
        $agentThree['money'] = $agentThreeFind['vip_lv'] < $vipFind['vip_lv'] ? $agentThreeVipFind['need_money'] * $agentThreeVipFindLv['agent_three'] / 100 : $vipFind['need_money'] * $vipFindLv['agent_three'] / 100;
        $agentThree['money_before'] = $agentThreeFind['money_balance'];
        $agentThree['money_end'] = $agentThreeFind['money_balance'] + $agentThree['money'];
        $array['agent_three'] = $agentThree;
        return $array;
    }

    public function inviteList()
    {
        $id = $this->request->param('id');
        $page = $this->request->param('page') ?? 1;
        $size = $this->request->param('size') ?? 20;
        if (empty($id)){
            return $this->failed('参数错误');
        }
        $listLog = VipInviteLogModel::page_list(['vip_user_id'=>$id] , $size , $page , 'create_time desc')->toArray();
        foreach ($listLog['data'] as $k =>$v){
            $listLog['data'][$k]['phone'] = $v['users']['phone'];
            $listLog['data'][$k]['vip_lv'] = $v['users']['vip_lv'];
            $listLog['data'][$k]['user_name'] = $v['users']['user_name'];
            unset($listLog['data'][$k]['users']);
        }
        return $this->success($listLog);
    }

    public function inviteDelete(){
        $id = $this->request->post('id');
        $deleteId = $this->request->post('delete_id');
        if (empty($id) || empty($deleteId)){
            return $this->failed('参数错误');
        }
        $inviteInfo = VipInviteLogModel::where(['id' => $id])->find();
        if ($inviteInfo == null){
            return $this->failed('担保关系不存在');
        }

        $userInfo = UserModel::where('id' , $deleteId)->find();
        if($userInfo->vip_lv > 0){
            return $this->failed('该用户已经是vip,无法撤销担保');
        }
        Db::startTrans();
        try {
            //检查该用户是否已经提现,如果提现,需要回退
            $check = PayCash::page_one(['u_id'=>$deleteId , 'status'=>0]);
            if($check != null){
                //1 退回用户金额
                $result = MoneyLog::inserts(2, 210, $check->money, $userInfo->money_balance, $userInfo->money_balance + $check->money, $check->u_id, $check->u_id, "Withdrawal from guarantee cancellation", $inviteInfo->vip_user_id, 5);
                if (!$result){
                    throw new \Exception("Failed to refund user balance for user_id {$deleteId}");
                }

                UserModel::where('id', $deleteId)->dec('money_freeze', $check->money)->inc('money_balance', $check->money)->update();
                $result = PayCash::where('id', $check->id)->save(['status' => 2]);
                if (!$result){
                    throw new \Exception("Failed to paycash user balance for user_id {$deleteId}");
                }
            }
            //减少上级已使用担保次数
            $check = UserModel::where('id' , $inviteInfo->vip_user_id)->dec('use_vip_count' , 1)->update();
            if(!$check){
                throw new \Exception("Failed to dec user_ user balance for user_id {$inviteInfo->vip_user_id}");
            }
            $check = VipInviteLogModel::where('vip_user_id' , $inviteInfo->vip_user_id)->where('invite_user_id' , $deleteId)->delete();
            if (!$check){
                throw new \Exception("Failed to delete vip invite model  user balance for user_id {$inviteInfo->vip_user_id}");
            }
            Db::commit();
        }catch (\Exception $e){
            Db::rollback();
            traceLogs($e->getMessage(),'delete invite info','error');
            return $this->failed("删除担保记录失败,请联系管理员");
        }
        return $this->success([]);
    }


    public function teamGuarantee(){
        $id = $this->request->post('id', 0);
        if ($id <= 0)
            return $this->failed('用户不存在');
        $find = $this->model->find($id);
        $find->team_guarantee = $find->team_guarantee == 1 ? 0 : 1;
        $save = $find->save();
        if ($save)
            return $this->success([]);
        return $this->failed('修改失败');
    }
}